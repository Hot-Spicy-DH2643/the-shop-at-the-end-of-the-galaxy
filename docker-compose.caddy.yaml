# Docker Compose with Caddy Reverse Proxy

services:
  mongo:
    image: mongo:6
    ports:
      - '27017:27017'
    volumes:
      - mongo-data:/data/db
    networks:
      - app-network

  backend:
    build: ./backend
    environment:
      - PORT=3001
      - MONGO_URI=mongodb://mongo:27017/galaxy-shop
      - NODE_ENV=production
      - FRONTEND_URL=https://the-shop-at-the-end-of-the-galaxy.lambozhuang.me
    env_file:
      - ./backend/.env
    expose:
      - '3001'
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      - mongo
    command: sh -c "npm install && npm start"
    restart: no
    healthcheck:
      test:
        [
          'CMD',
          'node',
          '-e',
          "require('http').get('http://localhost:3001', (r) => process.exit(r.statusCode === 200 ? 0 : 1))",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - app-network

  frontend:
    build: ./frontend
    environment:
      - PORT=3000
      - NODE_ENV=production
      - CI=true
      - NEXT_PUBLIC_GRAPHQL_URI=https://the-shop-at-the-end-of-the-galaxy.lambozhuang.me/graphql
      - NEXT_PUBLIC_BACKEND_URL=https://the-shop-at-the-end-of-the-galaxy.lambozhuang.me/api
      - NEXT_PUBLIC_WS_HOST=the-shop-at-the-end-of-the-galaxy.lambozhuang.me
    expose:
      - '3000'
    depends_on:
      backend:
        condition: service_healthy
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    command: sh -c "pnpm install && pnpm run build && pnpm start"
    restart: no
    healthcheck:
      test:
        [
          'CMD',
          'node',
          '-e',
          "require('http').get('http://localhost:3000', (r) => process.exit(r.statusCode === 200 ? 0 : 1))",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 180s
    networks:
      - app-network

  caddy:
    image: caddy:2-alpine
    restart: unless-stopped
    ports:
      - '80:80'
      - '443:443'
      - '443:443/udp'
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy-data:/data
      - caddy-config:/config
    depends_on:
      - frontend
      - backend
    networks:
      - app-network

volumes:
  mongo-data:
  caddy-data:
  caddy-config:

networks:
  app-network:
    driver: bridge
